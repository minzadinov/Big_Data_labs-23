[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\sudo\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\sudo\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.1 (Oracle Corporation Java 1.8.0_202)
[debug] Load.defaultLoad until apply took 495.3313ms
[debug]           Load.loadUnit: plugins took 49.9576ms
[debug]           Load.loadUnit: defsScala took 0.2083ms
[debug] [Loading] Scanning directory C:\Users\sudo\git\big_data\lr_4\L4_zoo\project
[debug]             Load.loadUnit: mkEval took 5.4376ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\sudo\git\big_data\lr_4\L4_zoo\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.8319 ms
[info] loading settings for project l4_zoo-build from idea.sbt ...
[debug]               Load.resolveProject(l4_zoo-build) took 43.1655ms
[debug]             Load.loadTransitive: finalizeProject(Project(id l4_zoo-build, base: C:\Users\sudo\git\big_data\lr_4\L4_zoo\project, plugins: List(<none>))) took 60.7446ms
[debug] [Loading] Done in C:\Users\sudo\git\big_data\lr_4\L4_zoo\project, returning: (l4_zoo-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1665.1422ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.9304ms
[debug]         Load.loadUnit(file:/C:/Users/sudo/git/big_data/lr_4/L4_zoo/project/, ...) took 1723.6108ms
[debug]       Load.apply: load took 1809.7854ms
[debug]       Load.apply: resolveProjects took 3.3695ms
[debug]       Load.apply: finalTransforms took 37.5959ms
[debug]       Load.apply: config.delegates took 4.3983ms
[debug]       Load.apply: Def.make(settings)... took 210.9561ms
[debug]       Load.apply: structureIndex took 55.4541ms
[debug]       Load.apply: mkStreams took 1.309ms
[info] loading project definition from C:\Users\sudo\git\big_data\lr_4\L4_zoo\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 3531.8249ms
[debug]     Load.loadUnit: defsScala took 0.0019ms
[debug] [Loading] Scanning directory C:\Users\sudo\git\big_data\lr_4\L4_zoo
[debug]       Load.loadUnit: mkEval took 0.2509ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.9401 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 18.9474ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\sudo\git\big_data\lr_4\L4_zoo, plugins: List(<none>))) took 22.0968ms
[debug] [Loading] Done in C:\Users\sudo\git\big_data\lr_4\L4_zoo, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 840.0343ms
[debug]     Load.loadUnit: cleanEvalClasses took 6.011ms
[debug]   Load.loadUnit(file:/C:/Users/sudo/git/big_data/lr_4/L4_zoo/, ...) took 4378.8498ms
[debug] Load.apply: load took 4390.2653ms
[debug] Load.apply: resolveProjects took 0.1036ms
[debug] Load.apply: finalTransforms took 16.444ms
[debug] Load.apply: config.delegates took 0.2066ms
[debug] Load.apply: Def.make(settings)... took 51.7932ms
[debug] Load.apply: structureIndex took 17.6024ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to L4_zoo (in build file:/C:/Users/sudo/git/big_data/lr_4/L4_zoo/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63600 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63600, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to L4_zoo (in build file:/C:/Users/sudo/git/big_data/lr_4/L4_zoo/)
[debug] > Exec(idea-shell, None, None)
